{
  "_from": "replace-in-file",
  "_id": "replace-in-file@3.4.2",
  "_inBundle": false,
  "_integrity": "sha512-wb2EU5MBBqUty+b1xSIqa0IKs5M2/a+4Ldw8KM5Gpe1btv16K0eii6nMxyNhAmRZhCEPrge0ss5Ij9f7vJEYcw==",
  "_location": "/replace-in-file",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "replace-in-file",
    "fetchSpec": "latest",
    "name": "replace-in-file",
    "raw": "replace-in-file",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/replace-in-file/-/replace-in-file-3.4.2.tgz",
  "_shasum": "6d40f076ac86948e28efeb6fab73fbad5c0bfa2a",
  "_spec": "replace-in-file",
  "_where": "C:\\Users\\Fabio\\git\\CopeAppProject",
  "author": {
    "email": "adam@reis.nz",
    "name": "Adam Reis",
    "url": "https://adam.reiz.nz/"
  },
  "bin": {
    "replace-in-file": "./bin/cli.js"
  },
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ]
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/adamreisnz/replace-in-file/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "chalk": "^2.4.1",
    "glob": "^7.1.2",
    "yargs": "^12.0.1"
  },
  "deprecated": false,
  "description": "A simple utility to quickly replace text in one or more files.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-es2015": "^6.24.1",
    "bluebird": "^3.5.1",
    "chai": "^4.1.2",
    "chai-as-promised": "^7.1.1",
    "dirty-chai": "^2.0.1",
    "istanbul": "^1.0.0-alpha.2",
    "mocha": "^5.0.4"
  },
  "homepage": "https://github.com/adamreisnz/replace-in-file#readme",
  "keywords": [
    "contents",
    "file",
    "replace",
    "text"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "replace-in-file",
  "optionalDependencies": {},
  "readme": "# Replace in file\n\n[![npm version](https://img.shields.io/npm/v/replace-in-file.svg)](https://www.npmjs.com/package/replace-in-file)\n[![node dependencies](https://david-dm.org/adamreisnz/replace-in-file.svg)](https://david-dm.org/adamreisnz/replace-in-file)\n[![build status](https://travis-ci.org/adamreisnz/replace-in-file.svg?branch=master)](https://travis-ci.org/adamreisnz/replace-in-file)\n[![coverage status](https://coveralls.io/repos/github/adamreisnz/replace-in-file/badge.svg?branch=master)](https://coveralls.io/github/adamreisnz/replace-in-file?branch=master)\n[![github issues](https://img.shields.io/github/issues/adamreisnz/replace-in-file.svg)](https://github.com/adamreisnz/replace-in-file/issues)\n\nA simple utility to quickly replace text in one or more files or globs. Works synchronously or asynchronously with either promises or callbacks. Make a single replacement or multiple replacements at once.\n\n# Index\n- [Installation](#installation)\n- [Basic usage](#basic-usage)\n  - [Asynchronous replacement with `async`/`await`](#asynchronous-replacement-with-asyncawait)\n  - [Asynchronous replacement with promises](asynchronous-replacement-with-promises)\n  - [Asynchronous replacement with callback](#asynchronous-replacement-with-callback)\n  - [Synchronous replacement](#synchronous-replacement)\n  - [Return value](#return-value)\n- [Advanced usage](#advanced-usage)\n  - [Replace a single file or glob](#replace-a-single-file-or-glob)\n  - [Replace multiple files or globs](#replace-multiple-files-or-globs)\n  - [Replace first occurrence only](#replace-first-occurrence-only)\n  - [Replace all occurrences](#replace-all-occurrences)\n  - [Multiple values with the same replacement](#multiple-values-with-the-same-replacement)\n  - [Multiple values with different replacements](#multiple-values-with-different-replacements)\n  - [Using callbacks for `from`](#using-callbacks-for-from)\n  - [Using callbacks for `to`](#using-callbacks-for-to)\n  - [Ignore a single file or glob](#ignore-a-single-file-or-glob)\n  - [Ignore multiple files or globs](#ignore-multiple-files-or-globs)\n  - [Allow empty/invalid paths](#allow-emptyinvalid-paths)\n  - [Disable globs](#disable-globs)\n  - [Specify glob configuration](#glob-configuration)\n  - [Specify character encoding](#specify-character-encoding)\n  - [Dry run](#dry-run)\n- [CLI usage](#cli-usage)\n- [Version information](#version-information)\n- [License](#license)\n\n## Installation\n```shell\n# Using npm, installing to local project\nnpm i --save replace-in-file\n\n# Using npm, installing globally for global cli usage\nnpm i -g replace-in-file\n\n# Using yarn\nyarn add replace-in-file\n```\n\n## Basic usage\n\n```js\n//Load the library and specify options\nconst replace = require('replace-in-file');\nconst options = {\n  files: 'path/to/file',\n  from: /foo/g,\n  to: 'bar',\n};\n```\n\n### Asynchronous replacement with `async`/`await`\n\n```js\ntry {\n  const changes = await replace(options)\n  console.log('Modified files:', changes.join(', '));\n}\ncatch (error) {\n  console.error('Error occurred:', error);\n}\n```\n\n### Asynchronous replacement with promises\n\n```js\nreplace(options)\n  .then(changes => {\n    console.log('Modified files:', changes.join(', '));\n  })\n  .catch(error => {\n    console.error('Error occurred:', error);\n  });\n```\n\n### Asynchronous replacement with callback\n\n```js\nreplace(options, (error, changes) => {\n  if (error) {\n    return console.error('Error occurred:', error);\n  }\n  console.log('Modified files:', changes.join(', '));\n});\n```\n\n### Synchronous replacement\n\n```js\ntry {\n  const changes = replace.sync(options);\n  console.log('Modified files:', changes.join(', '));\n}\ncatch (error) {\n  console.error('Error occurred:', error);\n}\n```\n\n### Return value\n\nThe return value of the library is an array of file names of files that were modified (e.g.\nhad some of the contents replaced). If no replacements were made, the return array will be empty.\n\n```js\nconst changes = replace.sync({\n  files: 'path/to/files/*.html',\n  from: 'foo',\n  to: 'bar',\n});\n\nconsole.log(changes);\n\n// [\n//   'path/to/files/file1.html',\n//   'path/to/files/file3.html',\n//   'path/to/files/file5.html',\n// ]\n```\n\n## Advanced usage\n\n### Replace a single file or glob\n```js\nconst options = {\n  files: 'path/to/file',\n};\n```\n\n### Replace multiple files or globs\n\n```js\nconst options = {\n  files: [\n    'path/to/file',\n    'path/to/other/file',\n    'path/to/files/*.html',\n    'another/**/*.path',\n  ],\n};\n```\n\n### Replace first occurrence only\n\n```js\nconst options = {\n  from: 'foo',\n  to: 'bar',\n};\n```\n\n### Replace all occurrences\nPlease note that the value specified in the `from` parameter is passed straight to the native [String replace method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace). As such, if you pass a string as the `from` parameter, it will _only replace the first occurrence_.\n\nTo replace multiple occurrences at once, you must use a regular expression for the `from` parameter with the global flag enabled, e.g. `/foo/g`.\n\n```js\nconst options = {\n  from: /foo/g,\n  to: 'bar',\n};\n```\n\n### Multiple values with the same replacement\n\nThese will be replaced sequentially.\n\n```js\nconst options = {\n  from: [/foo/g, /baz/g],\n  to: 'bar',\n};\n```\n\n### Multiple values with different replacements\n\nThese will be replaced sequentially.\n\n```js\nconst options = {\n  from: [/foo/g, /baz/g],\n  to: ['bar', 'bax'],\n};\n```\n\n### Using callbacks for `from`\nYou can also specify a callback that returns a string or a regular expression. The callback receives the name of the file in which the replacement is being performed, thereby allowing the user to tailor the search string. The following example uses a callback to produce a search string dependent on the filename:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: (file) => new RegExp(file, 'g'),\n  to: 'bar',\n};\n```\n\n### Using callbacks for `to`\nAs the `to` parameter is passed to the native [String replace method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), you can also specify a callback. The following example uses a callback to convert matching strings to lowercase:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: /SomePattern[A-Za-z-]+/g,\n  to: (match) => match.toLowerCase(),\n};\n```\n\nThis callback provides for an extra argument above the String replace method, which is the name of the file in which the replacement is being performed. The following example replaces the matched string with the filename:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: /SomePattern[A-Za-z-]+/g,\n  to: (...args) => args.pop(),\n};\n```\n\n### Ignore a single file or glob\n\n```js\nconst options = {\n  ignore: 'path/to/ignored/file',\n};\n```\n\n### Ignore multiple files or globs\n\n```js\nconst options = {\n  ignore: [\n    'path/to/ignored/file',\n    'path/to/other/ignored_file',\n    'path/to/ignored_files/*.html',\n    'another/**/*.ignore',\n  ],\n};\n```\n\nPlease note that there is an [open issue with Glob](https://github.com/isaacs/node-glob/issues/309) that causes ignored patterns to be ignored when using a `./` prefix in your files glob. To work around this, simply remove the prefix, e.g. use `**/*` instead of `./**/*`.\n\n### Allow empty/invalid paths\nIf set to true, empty or invalid paths will fail silently and no error will be thrown. For asynchronous replacement only. Defaults to `false`.\n\n```js\nconst options = {\n  allowEmptyPaths: true,\n};\n```\n\n### Disable globs\nYou can disable globs if needed using this flag. Use this when you run into issues with file paths like files like `//SERVER/share/file.txt`. Defaults to `false`.\n\n```js\nconst options = {\n  disableGlobs: true,\n};\n```\n\n### Specify glob configuration\nSpecify configuration passed to the `glob` call:\n\n```js\nconst options = {\n  glob: {\n    //Glob settings here\n  },\n};\n```\n\nPlease note that the setting `nodir` will always be passed as `false`.\n\n### Specify character encoding\nUse a different character encoding for reading/writing files. Defaults to `utf-8`.\n\n```js\nconst options = {\n  encoding: 'utf8',\n};\n```\n\n### Dry run\nTo do a dry run without actually making replacements, for testing purposes. Defaults to `false`.\n\n```js\nconst options = {\n  dry: true,\n};\n```\n\n## CLI usage\n\n```sh\nreplace-in-file from to some/file.js,some/**/glob.js\n  [--configFile=replace-config.js]\n  [--ignore=ignore/files.js,ignore/**/glob.js]\n  [--encoding=utf-8]\n  [--disableGlobs]\n  [--isRegex]\n  [--verbose]\n  [--dry]\n```\n\nMultiple files or globs can be replaced by providing a comma separated list.\n\nThe flags `--disableGlobs`, `--ignore` and `--encoding` are supported in the CLI.\n\nThe setting `allowEmptyPaths` is not supported in the CLI as the replacement is\nsynchronous, and this setting is only relevant for asynchronous replacement.\n\nTo list the changed files, use the `--verbose` flag. To do a dry run, use `--dry`.\n\nA regular expression may be used for the `from` parameter by specifying the `--isRegex` flag.\n\nThe `from` and `to` parameters, as well as the files list, can be omitted if you provide this\ninformation in a configuration file. You can provide a path to a configuration file\n(either Javascript or JSON) with the `--configFile` flag. This path will be resolved using\nNode’s built in `path.resolve()`, so you can pass in an absolute or relative path.\n\n## Version information\nFrom version 3.0.0 onwards, replace in file requires Node 6 or higher. If you need support for Node 4 or 5, please use version 2.x.x.\n\n## License\n(MIT License)\n\nCopyright 2015-2018, [Adam Reis](https://adam.reis.nz), co-founder at [Hello Club](https://helloclub.com/?source=npm)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adamreisnz/replace-in-file.git"
  },
  "scripts": {
    "coverage": "open -a \"Google Chrome\" ./coverage/lcov-report/index.html",
    "istanbul": "babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha lib/**/*.spec.js",
    "postversion": "git push && git push --tags && npm publish",
    "test": "npm run istanbul -s"
  },
  "version": "3.4.2"
}
