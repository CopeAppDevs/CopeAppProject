{
  "_from": "basic-auth",
  "_id": "basic-auth@2.0.1",
  "_inBundle": false,
  "_integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
  "_location": "/basic-auth",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "basic-auth",
    "fetchSpec": "latest",
    "name": "basic-auth",
    "raw": "basic-auth",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
  "_shasum": "b998279bf47ce38344b4f3cf916d4679bbf51e3a",
  "_spec": "basic-auth",
  "_where": "D:\\Documents\\Eclipse workspace\\NodeServerTemplate",
  "bugs": {
    "url": "https://github.com/jshttp/basic-auth/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "safe-buffer": "5.1.2"
  },
  "deprecated": false,
  "description": "node.js basic auth parser",
  "devDependencies": {
    "eslint": "5.6.0",
    "eslint-config-standard": "12.0.0",
    "eslint-plugin-import": "2.14.0",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "eslint-plugin-node": "7.0.1",
    "eslint-plugin-promise": "4.0.1",
    "eslint-plugin-standard": "4.0.0",
    "istanbul": "0.4.5",
    "mocha": "5.2.0"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "index.js"
  ],
  "homepage": "https://github.com/jshttp/basic-auth#readme",
  "keywords": [
    "auth",
    "authorization",
    "basic",
    "basicauth"
  ],
  "license": "MIT",
  "name": "basic-auth",
  "optionalDependencies": {},
  "readme": "# basic-auth\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nGeneric basic auth Authorization header field parser for whatever.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```\n$ npm install basic-auth\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar auth = require('basic-auth')\n```\n\n### auth(req)\n\nGet the basic auth credentials from the given request. The `Authorization`\nheader is parsed and if the header is invalid, `undefined` is returned,\notherwise an object with `name` and `pass` properties.\n\n### auth.parse(string)\n\nParse a basic auth authorization header string. This will return an object\nwith `name` and `pass` properties, or `undefined` if the string is invalid.\n\n## Example\n\nPass a Node.js request object to the module export. If parsing fails\n`undefined` is returned, otherwise an object with `.name` and `.pass`.\n\n<!-- eslint-disable no-unused-vars, no-undef -->\n\n```js\nvar auth = require('basic-auth')\nvar user = auth(req)\n// => { name: 'something', pass: 'whatever' }\n```\n\nA header string from any other location can also be parsed with\n`auth.parse`, for example a `Proxy-Authorization` header:\n\n<!-- eslint-disable no-unused-vars, no-undef -->\n\n```js\nvar auth = require('basic-auth')\nvar user = auth.parse(req.getHeader('Proxy-Authorization'))\n```\n\n### With vanilla node.js http server\n\n```js\nvar http = require('http')\nvar auth = require('basic-auth')\nvar compare = require('tsscmp')\n\n// Create server\nvar server = http.createServer(function (req, res) {\n  var credentials = auth(req)\n\n  // Check credentials\n  // The \"check\" function will typically be against your user store\n  if (!credentials || !check(credentials.name, credentials.pass)) {\n    res.statusCode = 401\n    res.setHeader('WWW-Authenticate', 'Basic realm=\"example\"')\n    res.end('Access denied')\n  } else {\n    res.end('Access granted')\n  }\n})\n\n// Basic function to validate credentials for example\nfunction check (name, pass) {\n  var valid = true\n\n  // Simple method to prevent short-circut and use timing-safe compare\n  valid = compare(name, 'john') && valid\n  valid = compare(pass, 'secret') && valid\n\n  return valid\n}\n\n// Listen\nserver.listen(3000)\n```\n\n# License\n\n[MIT](LICENSE)\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/jshttp/basic-auth/master\n[coveralls-url]: https://coveralls.io/r/jshttp/basic-auth?branch=master\n[downloads-image]: https://badgen.net/npm/dm/basic-auth\n[downloads-url]: https://npmjs.org/package/basic-auth\n[node-version-image]: https://badgen.net/npm/node/basic-auth\n[node-version-url]: https://nodejs.org/en/download\n[npm-image]: https://badgen.net/npm/v/basic-auth\n[npm-url]: https://npmjs.org/package/basic-auth\n[travis-image]: https://badgen.net/travis/jshttp/basic-auth/master\n[travis-url]: https://travis-ci.org/jshttp/basic-auth\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jshttp/basic-auth.git"
  },
  "scripts": {
    "lint": "eslint --plugin markdown --ext js,md .",
    "test": "mocha --check-leaks --reporter spec --bail",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
  },
  "version": "2.0.1"
}
