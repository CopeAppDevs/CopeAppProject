{
  "_from": "web-push",
  "_id": "web-push@3.3.3",
  "_inBundle": false,
  "_integrity": "sha512-Om4CNZpyzHP3AtGZpbBavCO7I9oCS9CFY2VDfTj/cFx2gm+mAtyK2OlKd6qu9pwCdZTyYanUiyhT0JSrs0ypHQ==",
  "_location": "/web-push",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "web-push",
    "fetchSpec": "latest",
    "name": "web-push",
    "raw": "web-push",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/web-push/-/web-push-3.3.3.tgz",
  "_shasum": "8dc7c578dd1243ceb5a8377389424e87ea9b15cc",
  "_spec": "web-push",
  "_where": "D:\\Documents\\Eclipse workspace\\NodeServerTemplate",
  "author": {
    "name": "Marco Castelluccio"
  },
  "bin": {
    "web-push": "src/cli.js"
  },
  "bugs": {
    "url": "https://github.com/web-push-libs/web-push/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "asn1.js": "^5.0.0",
    "http_ece": "1.0.5",
    "https-proxy-agent": "^2.2.1",
    "jws": "^3.1.3",
    "minimist": "^1.2.0",
    "urlsafe-base64": "^1.0.0"
  },
  "deprecated": false,
  "description": "Web Push library for Node.js",
  "devDependencies": {
    "chalk": "2.4.1",
    "chromedriver": "2.41.0",
    "del": "3.0.0",
    "eslint": "4.19.1",
    "eslint-config-airbnb": "16.1.0",
    "eslint-plugin-import": "2.14.0",
    "geckodriver": "1.12.2",
    "istanbul": "0.4.5",
    "mkdirp": "0.5.1",
    "mocha": "5.2.0",
    "portfinder": "1.0.17",
    "selenium-assistant": "5.3.0",
    "semver": "5.5.1",
    "sinon": "6.3.4",
    "which": "1.3.1"
  },
  "engines": {
    "node": ">= 4"
  },
  "homepage": "https://github.com/web-push-libs/web-push#readme",
  "keywords": [
    "notifications",
    "push",
    "push notifications",
    "web push"
  ],
  "license": "MPL-2.0",
  "main": "src/index.js",
  "name": "web-push",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">web-push</h1>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/web-push-libs/web-push\">\n    <img src=\"https://travis-ci.org/web-push-libs/web-push.svg?branch=master\" alt=\"Travis Build Status\" />\n  </a>\n  <a href=\"https://david-dm.org/web-push-libs/web-push\">\n    <img src=\"https://david-dm.org/web-push-libs/web-push.svg\" alt=\"NPM Dependency State\" />\n  </a>\n  <a href=\"https://david-dm.org/web-push-libs/web-push?type=dev\">\n    <img src=\"https://david-dm.org/web-push-libs/web-push/dev-status.svg\" alt=\"NPM Dev Dependency State\" />\n  </a>\n</p>\n\n# Why\n\nWeb push requires that push messages triggered from a backend be done via the\n[Web Push Protocol](https://tools.ietf.org/html/draft-ietf-webpush-protocol)\nand if you want to send data with your push message, you must also encrypt\nthat data according to the [Message Encryption for Web Push spec](https://tools.ietf.org/html/draft-ietf-webpush-encryption).\n\nThis module makes it easy to send messages and will also handle legacy support\nfor browsers relying on GCM for message sending / delivery.\n\n# Install\n\nInstallation is simple, just install via npm.\n\n    npm install web-push --save\n\n# Usage\n\nThe common use case for this library is an application server using\na GCM API key and VAPID keys.\n\n```javascript\nconst webpush = require('web-push');\n\n// VAPID keys should only be generated only once.\nconst vapidKeys = webpush.generateVAPIDKeys();\n\nwebpush.setGCMAPIKey('<Your GCM API Key Here>');\nwebpush.setVapidDetails(\n  'mailto:example@yourdomain.org',\n  vapidKeys.publicKey,\n  vapidKeys.privateKey\n);\n\n// This is the same output of calling JSON.stringify on a PushSubscription\nconst pushSubscription = {\n  endpoint: '.....',\n  keys: {\n    auth: '.....',\n    p256dh: '.....'\n  }\n};\n\nwebpush.sendNotification(pushSubscription, 'Your Push Payload Text');\n```\n\n## Using VAPID Key for applicationServerKey\n\nWhen using your VAPID key in your web app, you'll need to convert the\nURL safe base64 string to a Uint8Array to pass into the subscribe call,\nwhich you can do like so:\n\n```javascript\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nconst vapidPublicKey = '<Your Public Key from generateVAPIDKeys()>';\nconst convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n\nregistration.pushManager.subscribe({\n  userVisibleOnly: true,\n  applicationServerKey: convertedVapidKey\n});\n```\n\n## Command Line\n\nYou can install `web-push` globally and use it for sending notifications\nand / or generating VAPID keys.\n\nInstall like so:\n\n    npm install web-push -g\n\nThen you can run the following commands:\n\n    Usage:\n\n      web-push send-notification --endpoint=<url> [--key=<browser key>] [--auth=<auth secret>] [--payload=<message>] [--encoding=<aesgcm | aes128gcm>] [--ttl=<seconds>] [--vapid-subject=<vapid subject>] [--vapid-pubkey=<public key url base64>] [--vapid-pvtkey=<private key url base64>] [--gcm-api-key=<api key>]\n\n      web-push generate-vapid-keys [--json]\n\n\n# API Reference\n\n## sendNotification(pushSubscription, payload, options)\n\n```javascript\nconst pushSubscription = {\n  endpoint: '< Push Subscription URL >',\n  keys: {\n    p256dh: '< User Public Encryption Key >',\n    auth: '< User Auth Secret >'\n  }\n};\n\nconst payload = '< Push Payload String >';\n\nconst options = {\n  gcmAPIKey: '< GCM API Key >',\n  vapidDetails: {\n    subject: '< \\'mailto\\' Address or URL >',\n    publicKey: '< URL Safe Base64 Encoded Public Key >',\n    privateKey: '< URL Safe Base64 Encoded Private Key >'\n  },\n  TTL: <Number>,\n  headers: {\n    '< header name >': '< header value >'\n  },\n  contentEncoding: '< Encoding type, e.g.: aesgcm or aes128gcm >',\n  proxy: '< proxy server address >'\n}\n\nwebpush.sendNotification(\n  pushSubscription,\n  payload,\n  options\n);\n```\n\n> **Note:** `sendNotification()` you don't need to define a payload, and this\nmethod will work without a GCM API Key and / or VAPID keys if the push service\nsupports it.\n\n### Input\n\n**Push Subscription**\n\nThe first argument must be an object containing the details for a push\nsubscription.\n\nThe expected format is the same output as JSON.stringify'ing a PushSubscription\nin the browser.\n\n**Payload**\n\nThe payload is optional, but if set, will be the data sent with a push\nmessage.\n\nThis must be either a *string* or a node\n[*Buffer*](https://nodejs.org/api/buffer.html).\n\n> **Note:** In order to encrypt the *payload*, the *pushSubscription* **must**\nhave a *keys* object with *p256dh* and *auth* values.\n\n**Options**\n\nOptions is an optional argument that if defined should be an object containing\nany of the following values defined, although none of them are required.\n\n- **gcmAPIKey** can be a GCM API key to be used for this request and this\nrequest only. This overrides any API key set via `setGCMAPIKey()`.\n- **vapidDetails** should be an object with *subject*, *publicKey* and\n*privateKey* values defined. These values should follow the [VAPID Spec](https://tools.ietf.org/html/draft-thomson-webpush-vapid).\n- **TTL** is a value in seconds that describes how long a push message is\nretained by the push service (by default, four weeks).\n- **headers** is an object with all the extra headers you want to add to the request.\n- **contentEncoding** is the type of push encoding to use (e.g. 'aesgcm', by default, or 'aes128gcm').\n- **proxy** proxy hostname/ip and a port to tunnel your requests through (eg. http://< hostname >:< port >).\n\n### Returns\n\nA promise that resolves if the notification was sent successfully\nwith details of the request, otherwise it rejects.\n\nIn both cases, resolving or rejecting, you'll be able to access the following\nvalues on the returned object or error.\n\n- *statusCode*, the status code of the response from the push service;\n- *headers*, the headers of the response from the push service;\n- *body*, the body of the response from the push service.\n\n<hr />\n\n## generateVAPIDKeys()\n\n```javascript\nconst vapidKeys = webpush.generateVAPIDKeys();\n\n// Prints 2 URL Safe Base64 Encoded Strings\nconsole.log(vapidKeys.publicKey, vapidKeys.privateKey);\n```\n\n### Input\n\nNone.\n\n### Returns\n\nReturns an object with **publicKey** and **privateKey** values which are\nURL Safe Base64 encoded strings.\n\n> **Note:** You should create these keys once, store them and use them for all\n> future messages you send.\n\n<hr />\n\n## setGCMAPIKey(apiKey)\n\n```javascript\nwebpush.setGCMAPIKey('Your GCM API Key');\n```\n\n### Input\n\nThis method expects the GCM API key that is linked to the `gcm_sender_id ` in\nyour web app manifest.\n\nYou can use a GCM API Key from the Google Developer Console or the\n*Cloud Messaging* tab under a Firebase Project.\n\n### Returns\n\nNone.\n\n<hr />\n\n## encrypt(userPublicKey, userAuth, payload, contentEncoding)\n\n```javascript\nconst pushSubscription = {\n  endpoint: 'https://....',\n  keys: {\n    p256dh: '.....',\n    auth: '.....'\n  }\n};\nwebPush.encrypt(\n  pushSubscription.keys.p256dh,\n  pushSubscription.keys.auth,\n  'My Payload',\n  'aes128gcm'\n)\n.then(encryptionDetails => {\n\n});\n```\n\nEncrypts the payload according to the [Message Encryption for Web\nPush](https://webpush-wg.github.io/webpush-encryption/) standard.\n\n> (*sendNotification* will automatically encrypt the payload for you, so if\n> you use *sendNotification* you don't need to worry about it).\n\n### Input\n\nThe `encrypt()` method expects the following input:\n\n- *userPublicKey*: the public key of the receiver (from the browser).\n- *userAuth*: the auth secret of the receiver (from the browser).\n- *payload*: the message to attach to the notification.\n- *contentEncoding*: the type of content encoding to use (e.g. aesgcm or aes128gcm).\n\n### Returns\n\nThis method returns an object with the following fields:\n\n- *localPublicKey*: The public key matched the private key used during\nencryption.\n- *salt*: A string representing the salt used to encrypt the payload.\n- *cipherText*: The encrypted payload as a Buffer.\n\n<hr />\n\n## getVapidHeaders(audience, subject, publicKey, privateKey, contentEncoding, expiration)\n\n```javascript\nconst parsedUrl = url.parse(subscription.endpoint);\nconst audience = parsedUrl.protocol + '//' +\n  parsedUrl.hostname;\n\nconst vapidHeaders = vapidHelper.getVapidHeaders(\n  audience,\n  'mailto: example@web-push-node.org',\n  vapidDetails.publicKey,\n  vapidDetails.privateKey,\n  'aes128gcm'\n);\n```\n\nThe *getVapidHeaders()* method will take in the values needed to create\nan Authorization and Crypto-Key header.\n\n### Input\n\nThe `getVapidHeaders()` method expects the following input:\n\n- *audience*: the origin of the **push service**.\n- *subject*: the mailto or URL for your application.\n- *publicKey*: the VAPID public key.\n- *privateKey*: the VAPID private key.\n- *contentEncoding*: the type of content encoding to use (e.g. aesgcm or aes128gcm).\n\n### Returns\n\nThis method returns an object with the following fields:\n\n- *localPublicKey*: The public key matched the private key used during\nencryption.\n- *salt*: A string representing the salt used to encrypt the payload.\n- *cipherText*: The encrypted payload as a Buffer.\n\n<hr />\n\n## generateRequestDetails(pushSubscription, payload, options)\n\n```javascript\nconst pushSubscription = {\n  endpoint: '< Push Subscription URL >';\n  keys: {\n    p256dh: '< User Public Encryption Key >',\n    auth: '< User Auth Secret >'\n  }\n};\n\nconst payload = '< Push Payload String >';\n\nconst options = {\n  gcmAPIKey: '< GCM API Key >',\n  vapidDetails: {\n    subject: '< \\'mailto\\' Address or URL >',\n    publicKey: '< URL Safe Base64 Encoded Public Key >',\n    privateKey: '< URL Safe Base64 Encoded Private Key >',\n  }\n  TTL: <Number>,\n  headers: {\n    '< header name >': '< header value >'\n  },\n  contentEncoding: '< Encoding type, e.g.: aesgcm or aes128gcm >',\n  proxy: '< proxy server address >'\n}\n\ntry {\n  const details = webpush.generateRequestDetails(\n    pushSubscription,\n    payload,\n    options\n  );\n} catch (err) {\n  console.error(err);\n}\n```\n\n> **Note:** When calling `generateRequestDetails()` the payload argument\ndoes not *need* to be defined, passing in null will return no body and\n> exclude any unnecessary headers.\n> Headers related to the GCM API Key and / or VAPID keys will be included\n> if supplied and required.\n\n### Input\n\n**Push Subscription**\n\nThe first argument must be an object containing the details for a push\nsubscription.\n\nThe expected format is the same output as JSON.stringify'ing a PushSubscription\nin the browser.\n\n**Payload**\n\nThe payload is optional, but if set, will be encrypted and a [*Buffer*](https://nodejs.org/api/buffer.html)\n will be returned via the `payload` parameter.\n\nThis argument must be either a *string* or a node\n[*Buffer*](https://nodejs.org/api/buffer.html).\n\n> **Note:** In order to encrypt the *payload*, the *pushSubscription* **must**\nhave a *keys* object with *p256dh* and *auth* values.\n\n**Options**\n\nOptions is an optional argument that if defined should be an object containing\nany of the following values defined, although none of them are required.\n\n- **gcmAPIKey** can be a GCM API key to be used for this request and this\nrequest only. This overrides any API key set via `setGCMAPIKey()`.\n- **vapidDetails** should be an object with *subject*, *publicKey* and\n*privateKey* values defined. These values should follow the [VAPID Spec](https://tools.ietf.org/html/draft-thomson-webpush-vapid).\n- **TTL** is a value in seconds that describes how long a push message is\nretained by the push service (by default, four weeks).\n- **headers** is an object with all the extra headers you want to add to the request.\n- **contentEncoding** is the type of push encoding to use (e.g. 'aesgcm', by default, or 'aes128gcm').\n- **proxy** proxy hostname/ip and a port to tunnel your requests through (eg. http://< hostname >:< port >).\n\n### Returns\n\nAn object containing all the details needed to make a network request, the\nobject will contain:\n\n- *endpoint*, the URL to send the request to;\n- *method*, this will be 'POST';\n- *headers*, the headers to add to the request;\n- *body*, the body of the request (As a Node Buffer).\n\n<hr />\n\n# Browser Support\n\n<table>\n<thead>\n<tr>\n<th><strong>Browser</strong></th>\n<th width=\"130px\"><strong>Push without Payload</strong></th>\n<th width=\"130px\"><strong>Push with Payload</strong></th>\n<th width=\"130px\"><strong>VAPID</strong></th>\n<th><strong>Notes</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome</td>\n\n<!-- Push without payloads support-->\n<td>✓ v42+</td>\n\n<!-- Push with payload support -->\n<td>✓ v50+</td>\n\n<!-- VAPID Support -->\n<td>✓ v52+</td>\n\n<td>In v51 and less, the `gcm_sender_id` is needed to get a push subscription.</td>\n</tr>\n\n<tr>\n<td>Edge</td>\n\n<!-- Push without payloads support-->\n<td>✓ v17+ (April 2018)</td>\n\n<!-- Push with payload support -->\n<td>✓ v17+ (April 2018)</td>\n\n<!-- VAPID Support -->\n<td>✓ v17+ (April 2018)</td>\n\n<td></td>\n</tr>\n\n<tr>\n<td>Firefox</td>\n\n<!-- Push without payloads support-->\n<td>✓ v44+</td>\n\n<!-- Push with payload support -->\n<td>✓ v44+</td>\n\n<!-- VAPID Support -->\n<td>✓ v46+</td>\n\n<td></td>\n</tr>\n\n<tr>\n<td>Opera</td>\n\n<!-- Push without payloads support-->\n<td>✓ v39+ <strong>*</strong></td>\n\n<!-- Push with payload support -->\n<td>✓ v39+ <strong>*</strong></td>\n\n<!-- VAPID Support -->\n<td>✗</td>\n\n<td>\n  <strong>*</strong> Opera supports push on Android but not on desktop.\n  <br />\n  <br />\n  The `gcm_sender_id` is needed to get a push subscription.\n</td>\n</tr>\n\n<tr>\n<td>Safari</td>\n\n<!-- Push without payloads support-->\n<td>✗</td>\n\n<!-- Push with payload support -->\n<td>✗</td>\n\n<!-- VAPID Support -->\n<td>✗</td>\n\n<td></td>\n</tr>\n\n<tr>\n<td>Samsung Internet Browser</td>\n\n<!-- Push without payloads support-->\n<td>✓ v4.0.10-53+</td>\n\n<!-- Push with payload support -->\n<td>✓ v5.0.30-40+</td>\n\n<!-- VAPID Support -->\n<td>✗</td>\n\n<td>The `gcm_sender_id` is needed to get a push subscription.</td>\n</tr>\n</tbody>\n</table>\n\n# Help\n\n**Service Worker Cookbook**\n\nThe [Service Worker Cookbook](https://serviceworke.rs/) is full of Web Push\nexamples using this library.\n\n# Running tests\n\n> Prerequisites:\n>  * Java JDK or JRE (http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\nTo run tests:\n\n    npm test\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/web-push\">\n    <img src=\"https://nodei.co/npm/web-push.svg?downloads=true\" />\n  </a>\n</p>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/web-push-libs/web-push.git"
  },
  "scripts": {
    "download-browser": "node --harmony ./test/helpers/download-test-browsers.js",
    "lint": "node ./node_modules/eslint/bin/eslint --ignore-path .gitignore '.'",
    "pretest": "npm run lint && npm run download-browser",
    "test": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --ui tdd test/test*"
  },
  "version": "3.3.3"
}
